// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  sessions  Session[]
  accounts  Account[]
  jobPosts  JobPost[]
  jobApplications JobApplication[]
  
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  refresh_token      String?  // Opsional
  access_token       String?  // Opsional
  expires_at         Int?     // Opsional
  token_type         String?  // Opsional
  scope              String?  // Opsional
  id_token           String?  // Opsional
  session_state      String?  // Opsional

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Pastikan kombinasi unik
}

model JobPost {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle       String
  description    String
  jobType        String[]   
  schedule       String[]
  company        String
  country       String
  city       String
  responsibilities String
  skills         String[]   // Bisa diubah jadi JSON jika lebih dari satu
  requirements   String
  salaryAmount   String
  paymentType    String?
  companyLogo     String?
  jobApplications JobApplication[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model JobApplication {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostId String
  jobPost   JobPost  @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  cvUrl     String
  createdAt DateTime @default(now())

  @@unique([userId, jobPostId]) // Pastikan user hanya bisa melamar satu kali per pekerjaan
}


model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  fullName    String?
  phoneNumber String?
  linkedIn    String?
  portfolio   String?
  bio         String?
  avatarUrl   String?   
  location    String?   // Kota / Negara pelamar
  skills      String[]  // List keahlian dalam bentuk array
  experience  String?   // Ringkasan pengalaman kerja
  education   String?   // Ringkasan pendidikan
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}





